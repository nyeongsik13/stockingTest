name: Blue-Green Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check AWS CLI version
      run: aws --version

    - name: Set AWS CLI path
      run: export PATH=$PATH:/usr/local/bin/aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
        docker build -t $IMAGE_URI \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
          --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
          --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
          --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          --build-arg appKey="${{ secrets.APPKEY }}" \
          --build-arg secretKey="${{ secrets.SECRETKEY }}" \
          --build-arg USER="${{ secrets.USER }}" \
          --build-arg PASS="${{ secrets.PASS }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
          --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
          --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
          --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
          --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
          --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
        docker push $IMAGE_URI

    - name: Read last instance from file
      id: last_instance
      run: |
        if [ -f last_instance.txt ]; then
          echo "LAST_INSTANCE=$(cat last_instance.txt)" >> $GITHUB_ENV
          echo "if condition executed: last_instance.txt exists"
        else
          echo "LAST_INSTANCE=2" >> $GITHUB_ENV
          echo "else condition executed: last_instance.txt does not exist"
        fi
        echo "$TARGET_INSTANCE" > last_instance.txt


    # - name: Check if deploy_history.txt exists
    #   run: |
    #     if [ -f deploy_history/deploy_history.txt ]; then
    #       echo "deploy_history.txt exists."
    #       LAST_INSTANCE=$(grep 'A=' deploy_history/deploy_history.txt | cut -d '=' -f2)
    #       echo "LAST_INSTANCE found: $LAST_INSTANCE"
    #       echo "LAST_INSTANCE=$LAST_INSTANCE" >> $GITHUB_ENV
    #     else
    #       echo "deploy_history.txt does not exist."
    #       echo "Setting LAST_INSTANCE to default: 2"
    #       echo "LAST_INSTANCE=2" >> $GITHUB_ENV
    #     fi


    - name: Commit last instance
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add last_instance.txt
        git commit -m "Update last instance value"
        git push


    - name: Set target instance and keys
      run: |
          if [ "$LAST_INSTANCE" == "1" ]; then
            echo "TARGET_INSTANCE=2" >> $GITHUB_ENV
          else
            echo "TARGET_INSTANCE=1" >> $GITHUB_ENV
          fi

    - name: Deploy to Blue environment
      if: env.TARGET_INSTANCE == '1'
      uses: appleboy/ssh-action@master
      with:
            key: ${{ secrets.REMOTE_PRIVATE_KEY1 }}
            host: ${{ secrets.PUBLICIP1 }}
            username: ${{ secrets.EC2USER }}
            port: 22
            script: |
                echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
                docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest

                CONTAINER_NAME="my-app-blue"
                
                docker run -d --name $CONTAINER_NAME  -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
    
                sleep 30s # Wait for the new environment to start
                
                # Health check on new environment
                HEALTH_CHECK_RESULT=$(curl -s http://localhost:3000/)
    
                if [[ "$HEALTH_CHECK_RESULT" == *"<h1>Stocking 111!!</h1>"* ]]; then
                sudo systemctl restart nginx
                else
                echo "Health check failed. Rolling back..."
                fi

    - name: Deploy to Green environment
      if: env.TARGET_INSTANCE == '2'
      uses: appleboy/ssh-action@master
      with:
            key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
            host: ${{ secrets.PUBLICIP2 }}
            username: ${{ secrets.EC2USER }}
            port: 22
            script: |
                echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
                docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest

                CONTAINER_NAME="my-app-green"
                
                docker run -d --name $CONTAINER_NAME  -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
    
                sleep 30s # Wait for the new environment to start
                
                # Health check on new environment
                HEALTH_CHECK_RESULT=$(curl -s http://localhost:3000/)
    
                if [[ "$HEALTH_CHECK_RESULT" == *"<h1>Stocking 111!!</h1>"* ]]; then
                sudo systemctl restart nginx
                else
                echo "Health check failed. Rolling back..."
                fi


    - name: Stop and remove the old environment in old instance
      if: env.TARGET_INSTANCE == '1'
      uses: appleboy/ssh-action@master
      with:
                key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
                host: ${{ secrets.PUBLICIP2 }}
                username: ${{ secrets.EC2USER }}
                port: 22
                script: |
                    OLD_CONTAINER_NAME="my-app-green"
                    docker stop $OLD_CONTAINER_NAME || true
                    docker rm $OLD_CONTAINER_NAME || true

    - name: Stop and remove the old environment in old instance
      if: env.TARGET_INSTANCE == '2'
      uses: appleboy/ssh-action@master
      with:
                key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
                host: ${{ secrets.PUBLICIP2 }}
                username: ${{ secrets.EC2USER }}
                port: 22
                script: |
                    OLD_CONTAINER_NAME="my-app-blue"
                    docker stop $OLD_CONTAINER_NAME || true
                    docker rm $OLD_CONTAINER_NAME || true

    # - name: Create directory and update deploy history
    #   run: |
    #     mkdir -p deploy_history
    #     echo "A=$TARGET_INSTANCE" > deploy_history/deploy_history.txt

 
    # - name: Read deploy history
    #   run: cat deploy_history/deploy_history.txt
      

    - name: Upload last instance artifact
      uses: actions/upload-artifact@v3
      with:
        name: last-instance
        path: last-instance.txt