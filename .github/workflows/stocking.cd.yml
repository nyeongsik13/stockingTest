name: Blue-Green Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check AWS CLI version
      run: aws --version

    - name: Set AWS CLI path
      run: export PATH=$PATH:/usr/local/bin/aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
        docker build -t $IMAGE_URI \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
          --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
          --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
          --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          --build-arg appKey="${{ secrets.APPKEY }}" \
          --build-arg secretKey="${{ secrets.SECRETKEY }}" \
          --build-arg USER="${{ secrets.USER }}" \
          --build-arg PASS="${{ secrets.PASS }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
          --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
          --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
          --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
          --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
          --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
        docker push $IMAGE_URI

    - name: Deploy to Blue or Green environment on Instance 1
      uses: appleboy/ssh-action@master
      with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.PUBLICIP }}
          username: ${{ secrets.EC2USER }}
          port: 22
          script: |
            echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
  
            CURRENT_CONTAINERS=$(docker ps -a --format '{{.Names}}')
            

              # 처음 배포라면 블루 환경을 배포
            if [[ -z "$CURRENT_CONTAINERS" ]]; then
              NEW_BACKEND="blue"
            else 
              if [[ $CURRENT_CONTAINERS == *"my-app-blue"* ]]; then
                CURRENT_BACKEND="blue"
                NEW_BACKEND="green"
              else
                CURRENT_BACKEND="green"
                NEW_BACKEND="blue"
              fi
            fi
    
            # Deploy new environment
            if [ "$NEW_BACKEND" == "blue" ]; then
              docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
            else
              docker run -d --name my-app-$NEW_BACKEND -p 3001:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
            fi

            # Health check
            sleep 30s # Wait for the new environment to start
            HEALTH_CHECK_RESULT=$(curl -s http://localhost:3000/)
  
            if [[ "$HEALTH_CHECK_RESULT" == *"<h1>Stocking 111!!</h1>"* ]]; then
              # Update Nginx to route traffic to the new environment
              sudo sed -i "s/${CURRENT_BACKEND}_backend/${NEW_BACKEND}_backend/" /etc/nginx/nginx.conf
              sudo systemctl restart nginx
              # Stop and remove the current environment
              docker stop my-app-$CURRENT_BACKEND || true
              docker rm my-app-$CURRENT_BACKEND || true
            else
              echo "Health check failed. Rolling back..."
              docker stop my-app-$NEW_BACKEND
              docker rm my-app-$NEW_BACKEND
            fi
  
    - name: Deploy to Blue or Green environment on Instance 2
      uses: appleboy/ssh-action@master
      with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
          host: ${{ secrets.PUBLICIP2 }}
          username: ${{ secrets.EC2USER }}
          port: 22
          script: |
            echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
  
            CURRENT_CONTAINERS=$(docker ps -a --format '{{.Names}}')
            

            # 처음 배포라면 블루 환경을 배포
            if [[ -z "$CURRENT_CONTAINERS" ]]; then
              NEW_BACKEND="blue"
            else 
              if [[ $CURRENT_CONTAINERS == *"my-app-blue"* ]]; then
                CURRENT_BACKEND="blue"
                NEW_BACKEND="green"
              else
                CURRENT_BACKEND="green"
                NEW_BACKEND="blue"
              fi
            fi
  

  
            # Deploy new environment
            if [ "$NEW_BACKEND" == "blue" ]; then
              docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
            else
              docker run -d --name my-app-$NEW_BACKEND -p 3001:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
            fi


            # Health check
            sleep 30s # Wait for the new environment to start
            HEALTH_CHECK_RESULT=$(curl -s http://localhost:3000/)
  
            if [[ "$HEALTH_CHECK_RESULT" == *"<h1>Stocking 111!!</h1>"* ]]; then
              # Update Nginx to route traffic to the new environment
              sudo sed -i "s/\$CURRENT_BACKEND/\$NEW_BACKEND/" /etc/nginx/nginx.conf
              sudo systemctl restart nginx
              # Stop and remove the current environment
              docker stop my-app-$CURRENT_BACKEND || true
              docker rm my-app-$CURRENT_BACKEND || true
            else
              echo "Health check failed. Rolling back..."
              docker stop my-app-$NEW_BACKEND
              docker rm my-app-$NEW_BACKEND
            fi