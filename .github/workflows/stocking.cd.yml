name: Continuous Deployment

# 이 워크플로우는 main 브랜치로 푸시될 때 실행됩니다.
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 체크아웃 스텝
    - name: Checkout code
      uses: actions/checkout@v2

        # 깃허브 로그인 스텝
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
          registry: ghcr.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

    # 도커 이미지 빌드 및 푸시 스텝
    - name: Build and push Docker image
      run: |
        docker build . -t your-username/your-app:latest \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
          --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
          --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
          --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          --build-arg appKey="${{ secrets.APPKey }}" \
          --build-arg secreKey="${{ secrets.secretKey }}" \
          --build-arg SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}" \
          --build-arg USER="${{ secrets.USER }}" \
          --build-arg PASS="${{ secrets.PASS }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
          --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
          --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
          --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
          --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
          --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" \
        docker push your-username/your-app:latest

    # EC2 인스턴스에 SSH로 접속하여 Docker 이미지 배포
    - name: Deploy Docker image to EC2 instance
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ec2-user@your-ec2-instance-public-ip "docker pull your-username/your-app:latest && docker-compose up -d"
