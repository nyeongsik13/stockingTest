name: Continuous Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 체크아웃 스텝
    - name: Checkout code
      uses: actions/checkout@v2

    # AWS Credentials 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # ECR에 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
        docker build -t $IMAGE_URI\
          --build-arg DATABASE_URL=${{ secrets.DATABASE_URL }}\
          --build-arg DATABASE_HOST=${{ secrets.DATABASE_HOST }}\ 
          --build-arg DATABASE_PORT=${{ secrets.DATABASE_PORT }}\
          --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }}\
          --build-arg DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}\ 
          --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}\
          --build-arg PORT=${{ secrets.PORT }}\
          --build-arg appKey=${{ secrets.APPKEY }}\ 
          --build-arg secretKey=${{ secrets.SECRETKEY }}\ 
          --build-arg SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}\ 
          --build-arg USER=${{ secrets.USER }}\
          --build-arg PASS=${{ secrets.PASS }}\
          --build-arg JWT_SECRET=${{ secrets.JWT_SECRET }}\
          --build-arg GOOGLE_SECRET=${{ secrets.GOOGLE_SECRET }}\
          --build-arg GOOGLE_ID=${{ secrets.GOOGLE_ID }}\
          --build-arg NAVER_ID=${{ secrets.NAVER_ID }}\
          --build-arg NAVER_SECRET=${{ secrets.NAVER_SECRET }}\
          --build-arg KAKAO_ID=${{ secrets.KAKAO_ID }}\
          --build-arg BACKEND_URL=${{ secrets.BACKEND_URL }} .
        docker push $IMAGE_URI

    # EC2 인스턴스에 SSH로 접속하여 Docker 이미지 배포
    - name: Deploy Docker image to EC2 instance
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ec2-user@your-ec2-instance-public-ip "docker pull $IMAGE_URI && docker-compose up -d"
