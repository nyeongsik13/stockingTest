name: Blue-Green Deployment with Zero Downtime to AWS ECR

on:
  push:
    branches: [ main ]

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check AWS CLI version
      run: aws --version

    - name: Set AWS CLI path
      run: export PATH=$PATH:/usr/local/bin/aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
        docker build -t $IMAGE_URI \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
          --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
          --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
          --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          --build-arg appKey="${{ secrets.APPKEY }}" \
          --build-arg secretKey="${{ secrets.SECRETKEY }}" \
          --build-arg USER="${{ secrets.USER }}" \
          --build-arg PASS="${{ secrets.PASS }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
          --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
          --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
          --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
          --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
          --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
        docker push $IMAGE_URI

    - name: Deploy to Blue or Green environment on Instance 1
      uses: appleboy/ssh-action@master
      with:
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          host: ${{ secrets.PUBLICIP }}
          username: ${{ secrets.EC2USER }}
          port: 22
          script: |
            CURRENT_CONTAINERS=$(docker ps -a --format '{{.Names}}')
            
            if [[ $CURRENT_CONTAINERS == *"my-app-blue"* ]]; then
              CURRENT_BACKEND="blue"
            elif [[ $CURRENT_CONTAINERS == *"my-app-green"* ]]; then
              CURRENT_BACKEND="green"
            else
              # Deploy to new environment
              NEW_BACKEND="blue"
              docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
              sudo sed -i "s/$CURRENT_BACKEND/$NEW_BACKEND/" /etc/nginx/nginx.conf
              sudo systemctl restart nginx
            fi
      
            if [ "$CURRENT_BACKEND" == "blue" ]; then
              NEW_BACKEND="green"
            else
              NEW_BACKEND="blue"
            fi
      
            # Health Check
            NEW_CONTAINER_ID=$(docker run -d ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest)
            NEW_CONTAINER_IP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $NEW_CONTAINER_ID)
            HEALTH_CHECK_URL="http://$NEW_CONTAINER_IP:3000/"
            until $(curl --output /dev/null --silent --head --fail $HEALTH_CHECK_URL); do
              echo 'Waiting for the container to be healthy...'
              sleep 5
            done
      
            # Update NGINX routing
            sudo sed -i "s/$CURRENT_BACKEND/$NEW_BACKEND/" /etc/nginx/nginx.conf
            sudo systemctl restart nginx
      
            # Connection Draining
            sleep 30 # Wait for 30 seconds to drain existing connections
      
            # Rollback Strategy
            sudo sed -i "s/$NEW_BACKEND/$CURRENT_BACKEND/" /etc/nginx/nginx.conf
            sudo systemctl restart nginx
            echo "Deployment failed. Rolled back to $CURRENT_BACKEND."
      
            # Cleanup
            docker stop $NEW_CONTAINER_ID
            docker rm $NEW_CONTAINER_ID
      

    - name: Deploy to Blue or Green environment on Instance 2
      uses: appleboy/ssh-action@master
      with:
        key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
        host: ${{ secrets.PUBLICIP2 }}
        username: ${{ secrets.EC2USER }}
        port: 22
        script: |
          CURRENT_CONTAINERS=$(docker ps -a --format '{{.Names}}')
          
          if [[ $CURRENT_CONTAINERS == *"my-app-blue"* ]]; then
            CURRENT_BACKEND="blue"
          elif [[ $CURRENT_CONTAINERS == *"my-app-green"* ]]; then
            CURRENT_BACKEND="green"
          else
            # Deploy to new environment
            NEW_BACKEND="blue"
            docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
            sudo sed -i "s/\$CURRENT_BACKEND/\$NEW_BACKEND/" /etc/nginx/nginx.conf
            sudo systemctl restart nginx
          fi

          if [ "$CURRENT_BACKEND" == "blue" ]; then
            NEW_BACKEND="green"
          else
            NEW_BACKEND="blue"
          fi

          # Health Check
          NEW_CONTAINER_ID=$(docker run -d ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest)
          NEW_CONTAINER_IP=$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' $NEW_CONTAINER_ID)
          HEALTH_CHECK_URL="http://$NEW_CONTAINER_IP:3000/"
          until $(curl --output /dev/null --silent --head --fail $HEALTH_CHECK_URL); do
            echo 'Waiting for the container to be healthy...'
            sleep 5
          done

          # Update NGINX routing
          sudo sed -i "s/\$CURRENT_BACKEND/\$NEW_BACKEND/" /etc/nginx/nginx.conf
          sudo systemctl restart nginx

          # Connection Draining
          sleep 30 # Wait for 30 seconds to drain existing connections

          # Rollback Strategy
          sudo sed -i "s/\$CURRENT_BACKEND/$CURRENT_BACKEND/" /etc/nginx/nginx.conf
          sudo systemctl restart nginx
          echo "Deployment failed. Rolled back to $CURRENT_BACKEND."

          # Cleanup
          docker stop $NEW_CONTAINER_ID
          docker rm $NEW_CONTAINER_ID