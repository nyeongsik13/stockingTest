name: Continuous Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 체크아웃 스텝
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check AWS CLI version
      run: aws --version


    # AWS Credentials 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # ECR에 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
          docker build -t $IMAGE_URI \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
            --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
            --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
            --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            --build-arg PORT="${{ secrets.PORT }}" \
            --build-arg appKey="${{ secrets.APPKEY }}" \
            --build-arg secretKey="${{ secrets.SECRETKEY }}" \
            --build-arg SLACK_WEBHOOK_URL="${{ secrets.SLACK_WEBHOOK_URL }}" \
            --build-arg USER="${{ secrets.USER }}" \
            --build-arg PASS="${{ secrets.PASS }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
            --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
            --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
            --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
            --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
            --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
          docker push $IMAGE_URI
      

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}



    - name: SSH into EC2 instance and restart Docker container
      uses: appleboy/ssh-action@master
      with:
        key: ${{ secrets.REMOTE_PRIVATE_KEY }}  # EC2 인스턴스에 접속하기 위한 개인 키파일
        host: ${{ secrets.PUBLICIP }}           # EC2 인스턴스의 호스트 주소
        username: ${{ secrets.EC2USER }}   # EC2 인스턴스에 접속할 사용자 이름
        port: 22                                # SSH 포트 번호 (기본값은 22)
        script: |
          # AWS ECR에 로그인
          PASSWORD=$(aws ecr get-login-password --region ap-northeast-2)
          docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com <<< $PASSWORD
          
          # 이미지 가져오기
          sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
          # 현재 실행 중인 모든 컨테이너 중지
          sudo docker stop $(docker ps -a -q)
          
          # 중지된 모든 컨테이너 삭제
          sudo docker rm $(docker ps -a -q)
          
          # 이미지 삭제
          sudo docker rmi $(docker images -q)
          
          # 컨테이너 실행
          sudo docker run -d --name stocking -p 3000:3000  ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
          
          # 실행된 컨테이너 확인
          sudo docker ps -a
          
          # 사용하지 않는 리소스 정리
          sudo docker system prune -a -f
          
          # 사용되지 않는 이미지 삭제
          sudo docker images
