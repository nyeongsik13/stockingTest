name: Continuous Blue-Green Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:

  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Check AWS CLI version
      run: aws --version
      
    - name: Set AWS CLI path
      run: export PATH=$PATH:/usr/local/bin/aws
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'
        
    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
        docker build -t $IMAGE_URI \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
          --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
          --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
          --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
          --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
          --build-arg PORT="${{ secrets.PORT }}" \
          --build-arg appKey="${{ secrets.APPKEY }}" \
          --build-arg secretKey="${{ secrets.SECRETKEY }}" \
          --build-arg USER="${{ secrets.USER }}" \
          --build-arg PASS="${{ secrets.PASS }}" \
          --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
          --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
          --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
          --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
          --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
          --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
          --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
        docker push $IMAGE_URI
        
    - name: Deploy to Blue or Green environment
      env:
        INSTANCE_1_IP: ${{ secrets.PUBLICIP }}
        INSTANCE_1_SSH_KEY: ${{ secrets.REMOTE_PRIVATE_KEY }}
        INSTANCE_2_IP: ${{ secrets.PUBLICIP2 }}
        INSTANCE_2_SSH_KEY: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
        EC2_USER: ${{ secrets.EC2USER }}
      run: |
        # 도커 로그인
        echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
        
        # 중앙 배포 관리 시스템에서 배포 상태 확인
        CURRENT_BACKEND=$(curl -s https://deployment-manager.example.com/api/status | jq -r '.currentBackend')
        
        if [ "$CURRENT_BACKEND" == "blue" ]; then
          NEW_BACKEND="green"
        else
          NEW_BACKEND="blue"
        fi
        
        # 인스턴스 1에 배포
        docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "sudo sed -i 's/$CURRENT_BACKEND/$NEW_BACKEND/' /etc/nginx/nginx.conf"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "sudo systemctl restart nginx"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "docker stop my-app-$CURRENT_BACKEND"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "docker rm my-app-$CURRENT_BACKEND"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_1_SSH_KEY $EC2_USER@$INSTANCE_1_IP "docker system prune -a -f"
        
        # 인스턴스 2에 배포
        docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "sudo sed -i 's/$CURRENT_BACKEND/$NEW_BACKEND/' /etc/nginx/nginx.conf"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "sudo systemctl restart nginx"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "docker stop my-app-$CURRENT_BACKEND"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "docker rm my-app-$CURRENT_BACKEND"
        ssh -o StrictHostKeyChecking=no -i $INSTANCE_2_SSH_KEY $EC2_USER@$INSTANCE_2_IP "docker system prune -a -f"
        
        # 중앙 배포 관리 시스템에 배포 성공 보고
        curl -X POST -H "Content-Type: application/json" -d '{"currentBackend":"$NEW_BACKEND"}' https://deployment-manager.example.com/api/update