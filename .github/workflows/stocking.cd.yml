name: Continuous Blue-Green Deployment to AWS ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check AWS CLI version
      run: aws --version

    - name: Set AWS CLI path
      run: export PATH=$PATH:/usr/local/bin/aws

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test
      run: |
          docker build -t $IMAGE_URI \
            --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
            --build-arg DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
            --build-arg DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
            --build-arg DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
            --build-arg DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}" \
            --build-arg DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
            --build-arg PORT="${{ secrets.PORT }}" \
            --build-arg appKey="${{ secrets.APPKEY }}" \
            --build-arg secretKey="${{ secrets.SECRETKEY }}" \
            --build-arg USER="${{ secrets.USER }}" \
            --build-arg PASS="${{ secrets.PASS }}" \
            --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --build-arg GOOGLE_SECRET="${{ secrets.GOOGLE_SECRET }}" \
            --build-arg GOOGLE_ID="${{ secrets.GOOGLE_ID }}" \
            --build-arg NAVER_ID="${{ secrets.NAVER_ID }}" \
            --build-arg NAVER_SECRET="${{ secrets.NAVER_SECRET }}" \
            --build-arg KAKAO_ID="${{ secrets.KAKAO_ID }}" \
            --build-arg BACKEND_URL="${{ secrets.BACKEND_URL }}" .
          docker push $IMAGE_URI

    - name: Install Nginx on Instance 1
      uses: appleboy/ssh-action@master
      with:
            key: ${{ secrets.REMOTE_PRIVATE_KEY }}
            host: ${{ secrets.PUBLICIP }}
            username: ${{ secrets.EC2USER }}
            port: 22
            script: |
              sudo apt update
              sudo apt install nginx -y
              echo "events {
                  worker_connections 1024;  # 예시 값, 필요에 따라 조정 가능
              }
        
              http {
                  upstream blue_backend {
                      server ${{ secrets.PUBLICIP }}:3000;
                  }
                  upstream green_backend {
                      server ${{ secrets.PUBLICIP }}:3001;
                  }
                  server {
                      listen 80;
                      location / {
                          proxy_pass http://blue_backend;
                      }
                      location /green {
                        proxy_pass http://green_backend;
                    }
                  }
              }" | sudo tee /etc/nginx/nginx.conf
        
    - name: Deploy to Blue or Green environment on Instance 1
      uses: appleboy/ssh-action@master
      with:
            key: ${{ secrets.REMOTE_PRIVATE_KEY }}
            host: ${{ secrets.PUBLICIP }}
            username: ${{ secrets.EC2USER }}
            port: 22
            script: |
              echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
              docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
    
              CURRENT_BACKEND=$(ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "grep -oP 'upstream\s+\K\w+' /etc/nginx/nginx.conf | head -n 1 | sed 's/_backend//g'")
              echo "Current Backend on Instance 1: $CURRENT_BACKEND"

              if [ "$CURRENT_BACKEND" == "blue" ]; then
                NEW_BACKEND="green"
              else
                NEW_BACKEND="blue"
              fi
    
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "sudo sed -i 's/$CURRENT_BACKEND/$NEW_BACKEND/' /etc/nginx/nginx.conf"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "sudo systemctl restart nginx"
    
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "docker stop my-app-$CURRENT_BACKEND"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "docker rm my-app-$CURRENT_BACKEND"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP }} "docker system prune -a -f"

    - name: Install Nginx on Instance 2
      uses: appleboy/ssh-action@master
      with:
        key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
        host: ${{ secrets.PUBLICIP2 }}
        username: ${{ secrets.EC2USER }}
        port: 22
        script: |
          sudo apt update
          sudo apt install nginx -y
          echo "events {
            worker_connections 1024;  # 예시 값, 필요에 따라 조정 가능
          }  
          http {
                upstream blue_backend {
                    server ${{ secrets.PUBLICIP2 }}:3000;
                }
                upstream green_backend {
                    server ${{ secrets.PUBLICIP2 }}:3001;
                }
                server {
                    listen 80;
                    location / {
                        proxy_pass http://blue_backend;
                    }
                    location /green {
                      proxy_pass http://green_backend;
                  }
                }
            }" | sudo tee /etc/nginx/nginx.conf

    - name: Deploy to Blue or Green environment on Instance 2
      uses: appleboy/ssh-action@master
      with:
            key: ${{ secrets.REMOTE_PRIVATE_KEY2 }}
            host: ${{ secrets.PUBLICIP2 }}
            username: ${{ secrets.EC2USER }}
            port: 22
            script: |
              echo $(aws ecr get-login-password --region ${{ secrets.AWS_REGION }}) | docker login -u AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
              docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest
    
              CURRENT_BACKEND=$(ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "grep -oP 'upstream\s+\K\w+' /etc/nginx/nginx.conf | head -n 1 | sed 's/_backend//g'")
              echo "Current Backend on Instance 2: $CURRENT_BACKEND"

              if [ "$CURRENT_BACKEND" == "blue" ]; then
                NEW_BACKEND="green"
              else
                NEW_BACKEND="blue"
              fi
    
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "sudo sed -i 's/$CURRENT_BACKEND/$NEW_BACKEND/' /etc/nginx/nginx.conf"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "sudo systemctl restart nginx"
    
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "docker run -d --name my-app-$NEW_BACKEND -p 3000:3000 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/test:latest"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "docker stop my-app-$CURRENT_BACKEND"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "docker rm my-app-$CURRENT_BACKEND"
              ssh ${{ secrets.EC2USER }}@${{ secrets.PUBLICIP2 }} "docker system prune -a -f"